From 6ec429868ea1fd846385bba369c0f5e55a0212fd Mon Sep 17 00:00:00 2001
Message-Id: <6ec429868ea1fd846385bba369c0f5e55a0212fd.1603112886.git.anand.jain@oracle.com>
In-Reply-To: <cover.1603112886.git.anand.jain@oracle.com>
References: <cover.1603112886.git.anand.jain@oracle.com>
From: Anand Jain <anand.jain@oracle.com>
Date: Mon, 20 Jul 2020 14:16:43 +0800
Subject: [PATCH 2/3] btrfs: boilerplates: add dbgctl_A

Signed-off-by: Anand Jain <anand.jain@oracle.com>
---
 fs/btrfs/procfs.c | 70 +++++++++++++++++++++++++++++++++++++++++++++++
 fs/btrfs/procfs.h |  1 +
 2 files changed, 71 insertions(+)

diff --git a/fs/btrfs/procfs.c b/fs/btrfs/procfs.c
index c75076956e68..c536ae226fb5 100644
--- a/fs/btrfs/procfs.c
+++ b/fs/btrfs/procfs.c
@@ -1,6 +1,7 @@
 #include <linux/seq_file.h>
 #include <linux/vmalloc.h>
 #include <linux/proc_fs.h>
+#include <linux/delay.h>
 #include "ctree.h"
 #include "volumes.h"
 #include "rcu-string.h"
@@ -11,6 +12,7 @@
 #define BTRFS_PROC_PATH		"fs/btrfs"
 #define BTRFS_PROC_DEVLIST	"devlist"
 #define BTRFS_PROC_FSINFO	"fsinfo"
+#define BTRFS_PROC_DBGCTL_A	"dbgctl_A"
 
 //#define USE_ALLOC_LIST
 //#define VOL_FLAGS
@@ -546,6 +548,52 @@ void btrfs_print_devlist(struct seq_file *seq, struct btrfs_fs_devices *the_fs_d
 	}
 }
 
+int btrfs_dbgctl_A = -1;
+void btrfs_dbgctl_A_wait(char *suffix)
+{
+	int old = btrfs_dbgctl_A;
+
+	printk("bp: btrfs_dbgctl_A %d waiting..%s\n", btrfs_dbgctl_A, suffix);
+	while (old == btrfs_dbgctl_A) {
+		msleep(100);
+		continue;
+	}
+}
+
+static ssize_t btrfs_dbgctl_A_write(struct file *file,
+				    const char __user *buffer, size_t count,
+				    loff_t *pos)
+{
+	char buf[256];
+	long val;
+	int ret = 0;
+
+	if (count > 256)
+		return -EINVAL;
+
+	if (copy_from_user(buf, buffer, count))
+		return -EFAULT;
+
+	buf[count] = '\0';
+	ret = kstrtol(buf, 10, &val);
+	if (ret)
+		return -ret;
+
+	btrfs_dbgctl_A = val;
+	return count;
+}
+
+static int btrfs_dbgctl_A_read(struct seq_file *seq, void *offset)
+{
+	seq_printf(seq, "%d\n", btrfs_dbgctl_A);
+	return 0;
+}
+
+static int btrfs_dbgctl_A_open(struct inode *inode, struct file *file)
+{
+	return single_open(file, btrfs_dbgctl_A_read, PDE_DATA(inode));
+}
+
 static int btrfs_fsinfo_show(struct seq_file *seq, void *offset)
 {
 	btrfs_print_fsinfo(seq);
@@ -568,6 +616,25 @@ static int btrfs_seq_devlist_open(struct inode *inode, struct file *file)
 	return single_open(file, btrfs_devlist_show, PDE_DATA(inode));
 }
 
+#ifdef OLD_PROC
+static const struct file_operations btrfs_dbgctl_A_fops = {
+	.owner   = THIS_MODULE,
+	.open    = btrfs_dbgctl_A_open,
+	.read    = seq_read,
+	.llseek  = seq_lseek,
+	.release = single_release,
+	.write	 = btrfs_dbgctl_A_write,
+};
+#else
+static const struct proc_ops btrfs_dbgctl_A_fops = {
+	.proc_open    = btrfs_dbgctl_A_open,
+	.proc_read    = seq_read,
+	.proc_lseek  = seq_lseek,
+	.proc_release = single_release,
+	.proc_write = btrfs_dbgctl_A_write,
+};
+#endif
+
 #ifdef OLD_PROC
 static const struct file_operations btrfs_seq_devlist_fops = {
 	.owner   = THIS_MODULE,
@@ -610,6 +677,8 @@ void btrfs_init_procfs(void)
 					&btrfs_seq_devlist_fops, NULL);
 		proc_create_data(BTRFS_PROC_FSINFO, S_IRUGO, btrfs_proc_root,
 					&btrfs_seq_fsinfo_fops, NULL);
+		proc_create_data(BTRFS_PROC_DBGCTL_A, S_IRUGO|S_IWUGO, btrfs_proc_root,
+					&btrfs_dbgctl_A_fops, NULL);
 	}
 	return;
 }
@@ -619,6 +688,7 @@ void btrfs_exit_procfs(void)
 	if (btrfs_proc_root) {
 		remove_proc_entry(BTRFS_PROC_DEVLIST, btrfs_proc_root);
 		remove_proc_entry(BTRFS_PROC_FSINFO, btrfs_proc_root);
+		remove_proc_entry(BTRFS_PROC_DBGCTL_A, btrfs_proc_root);
 	}
 	remove_proc_entry(BTRFS_PROC_PATH, NULL);
 }
diff --git a/fs/btrfs/procfs.h b/fs/btrfs/procfs.h
index f7b712b58a5d..351b3fd5f41c 100644
--- a/fs/btrfs/procfs.h
+++ b/fs/btrfs/procfs.h
@@ -1,2 +1,3 @@
 void btrfs_exit_procfs(void);
 void btrfs_init_procfs(void);
+void btrfs_dbgctl_A_wait(char *suffix);
-- 
2.25.1

